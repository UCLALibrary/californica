# frozen_string_literal: true
# Generated by hyrax:models
class Collection < ActiveFedora::Base
  include ::Hyrax::CollectionBehavior
  include UclaMetadata

  # Re-calculating a collection's size is very expensive, and we need a way to turn it off during bulk import
  property :recalculate_size, predicate: ::RDF::URI.intern('https://library.ucla.edu/bytes_computing_disabled'), multiple: false do |index|
    index.as :stored_sortable
  end

  # You can replace these metadata if they're not suitable
  include Hyrax::BasicMetadata
  self.indexer = ::CollectionIndexer

  validates :ark, presence: { message: 'Your Collection must have an ARK.' }

  # @param ark [String] The ARK
  # @return [Collection] The Collection with that ARK
  def self.find_by_ark(ark)
    where(ark_ssi: ark).limit(1).first
  end

  # Do not recalculate size unless recalculate_size == true
  # Recalculating collection size is expensive, so only do it if we really need it.
  def bytes
    return 0 unless recalculate_size
    super
  end

  # Do not reindex the collection upon save unless reindex is on explicitly
  def update_index(*args)
    super if recalculate_size
  end

  # Do a "limited" reindex unless recalculate_size is turned on
  def reindex_extent
    return "limited" unless recalculate_size
    Hyrax::Adapters::NestingIndexAdapter::FULL_REINDEX
  end

  # @param ark [String] The ARK
  # @return [Collection] The Collection with that ARK
  # rubocop:disable Metrics/MethodLength
  def self.find_or_create_by_ark(ark)
    collection = find_by_ark(ark)
    return collection if collection

    collection = Collection.create(
      id: Californica::IdGenerator.id_from_ark(ark),
      title: ["Collection #{ark}"],
      ark: ark,
      collection_type: Hyrax::CollectionType.find_or_create_default_collection_type,
      visibility: Hydra::AccessControls::AccessRight::VISIBILITY_TEXT_VALUE_PUBLIC,
      depositor: ::User.batch_user.user_key,
      edit_users: [::User.batch_user.user_key]
    )

    # Members of the 'admin' group can edit this Collection
    grants = [{ agent_type: 'group', agent_id: 'admin', access: Hyrax::PermissionTemplateAccess::MANAGE }]
    Hyrax::Collections::PermissionsCreateService.create_default(collection: collection, creating_user: User.batch_user, grants: grants)

    collection
  rescue ActiveFedora::IllegalOperation => e
    raise e unless e.message.start_with?('Attempting to recreate existing ldp_source')

    retries ||= 0
    fcrepo_id = Californica::IdGenerator.id_from_ark(ark)
    Californica::Deleter.new(id: fcrepo_id).delete
    if (retries += 1) < 3
      retry
    else
      raise e
    end
  end
end
